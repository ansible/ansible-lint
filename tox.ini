[tox]
minversion = 3.16.1
envlist = lint,packaging,py{39,38,37,36}-{core,ansible29,devel}
isolated_build = true
requires =
  setuptools >= 41.4.0
  pip >= 19.3.0
skip_missing_interpreters = True
# `usedevelop = true` overrides `skip_install` instruction, it's unwanted
usedevelop = false

[testenv]
description =
  Run the tests under {basepython} and
  devel: ansible devel branch
  ansible29: ansible 2.9
  core: ansible-base 2.10
  py: ansible-core 2.11
extras =
  yamllint
  core: core
  ; devel: devel
deps =
  ansible29: ansible>=2.9,<2.10
  py: ansible-core>=2.11
  devel: ansible-core @ git+https://github.com/ansible/ansible.git  # GPLv3+
  -r test-requirements.in
  -c test-requirements.txt
commands =
  # safety measure to assure we do not accidentally run tests with broken dependencies
  {envpython} -m pip check
  # We add coverage options but not making them mandatory as we do not want to force
  # pytest users to run coverage when they just want to run a single test with `pytest -k test`
  {envpython} -m pytest \
  --junitxml "{toxworkdir}/junit.{envname}.xml" \
  {posargs:\
    --cov ansiblelint \
    --cov "{envsitepackagesdir}/ansiblelint" \
    --cov-report term-missing:skip-covered \
    --cov-report xml:.test-results/pytest/cov.xml \
    --no-cov-on-fail}
install_command =
  {envpython} -m \
    pip install \
    {opts} \
    {packages}
passenv =
  CURL_CA_BUNDLE  # https proxies, https://github.com/tox-dev/tox/issues/1437
  FORCE_COLOR
  HOME
  NO_COLOR
  PYTEST_*  # allows developer to define their own preferences
  PY_COLORS
  REQUESTS_CA_BUNDLE  # https proxies
  SSL_CERT_FILE  # https proxies
  LANG
  LC_ALL
  LC_CTYPE
# recreate = True
setenv =
  COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
  PIP_DISABLE_PIP_VERSION_CHECK = 1
  PRE_COMMIT_COLOR = always
  FORCE_COLOR = 1
whitelist_externals =
  sh

[testenv:lint]
description = Run all linters
basepython = python3
deps =
  pre-commit>=2.6.0
  pip-tools>=5.4.0
  setuptools>=51.1.1
skip_install = true
commands =
  # --no-annotate is used in order to prevent conflicts with PRs produced by dependency-bot
  pip-compile --no-annotate --output-file=test-requirements.txt setup.py test-requirements.in
  pip-compile --no-annotate --output-file=docs/requirements.txt setup.py docs/requirements.in
  {envpython} -m pre_commit run {posargs:--all-files --hook-stage manual -v}
passenv =
  {[testenv]passenv}
  PRE_COMMIT_HOME

[testenv:deps]
description = Bump all test depeendencies
basepython = python3
deps =
  pre-commit>=2.6.0
  pip-tools>=5.4.0
  setuptools>=51.1.1
skip_install = true
commands =
  # --no-annotate is used in order to prevent conflicts with PRs produced by dependency-bot
  pip-compile --upgrade --no-annotate --output-file=test-requirements.txt setup.py test-requirements.in
  pip-compile --upgrade --no-annotate --output-file=docs/requirements.txt setup.py docs/requirements.in
  {envpython} -m pre_commit run {posargs:--all-files --hook-stage manual -v}

[testenv:docs]
description = Builds docs
basepython = python3
deps =
  -r{toxinidir}/docs/requirements.in
  -c{toxinidir}/docs/requirements.txt
commands =
  # Build the html docs with Sphinx:
  {envpython} -m sphinx \
    -j auto \
    -b html \
    --color \
    -a \
    -n \
    -W \
    -d "{temp_dir}/.doctrees" \
    . \
    "{envdir}/html"

  # Print out the output docs dir and a way to serve html:
  -{envpython} -c \
  'import pathlib; docs_dir = pathlib.Path(r"{envdir}") / "html"; index_file = docs_dir / "index.html"; '\
  'print("\n" + "=" * 120 + f"\n\nDocumentation available under `file://\{index_file\}`\n\nTo serve docs, use `python3 -m http.server --directory \{docs_dir\} 0`\n\n" + "=" * 120)'
changedir = {toxinidir}/docs

[testenv:eco]
description = Perform ecosystem impact (downstream testing) https://github.com/ansible-community/ansible-lint/discussions/1403
commands =
  ansible-playbook -i localhost, playbooks/eco.yml
extras =
  yamllint
  community
setenv =
  ANSIBLE_FORCE_COLOR=1
  ANSIBLE_NOCOWS=1
  ANSIBLE_PYTHON_INTERPRETER=auto_silent
  ANSIBLE_STDOUT_CALLBACK=yaml
  NO_COLOR=1

[testenv:packaging]
basepython = python3
description =
  Build package, verify metadata, install package and assert behavior when ansible is missing.
deps =
  pep517 >= 0.7.0
  twine
skip_install = true
# Ref: https://twitter.com/di_codes/status/1044358639081975813
commands =
  # build wheel and sdist using PEP-517
  {envpython} -c 'import os.path, shutil, sys; \
  dist_dir = os.path.join("{toxinidir}", "dist"); \
  os.path.isdir(dist_dir) or sys.exit(0); \
  print("Removing \{!s\} contents...".format(dist_dir), file=sys.stderr); \
  shutil.rmtree(dist_dir)'
  {envpython} -m pep517.build \
    --source \
    --binary \
    --out-dir {toxinidir}/dist/ \
    {toxinidir}
  # Validate metadata using twine
  twine check {toxinidir}/dist/*
  # Install the wheel
  sh -c "python3 -m pip install {toxinidir}/dist/*.whl"
  # Re-assure ansible is not installed
  {envpython} tools/check-missing-ansible.py
