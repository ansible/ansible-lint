# spell-checker:ignore linkcheck basepython changedir envdir envlist envname envsitepackagesdir passenv setenv testenv toxinidir toxworkdir usedevelop doctrees envpython posargs
[tox]
minversion = 3.16.1
envlist =
  lint
  packaging
  docs
  py
  py-devel
isolated_build = true
requires =
  setuptools >= 41.4.0
  pip >= 19.3.0
  # tox-extra ensure non-zero exit code if git reports dirty after test run
  tox-extra >= 0.3.0
skip_missing_interpreters = True

[testenv]
description =
  Run the tests under {basepython} and
  devel: ansible devel branch
deps =
  --editable .[test]
  devel: ansible-core @ git+https://github.com/ansible/ansible.git  # GPLv3+
commands =
  # safety measure to assure we do not accidentally run tests with broken dependencies
  {envpython} -m pip check
  # we update the schemas
  pytest --update-schemas
  coverage run -m pytest {posargs:\
    -n auto \
    -ra \
    --showlocals \
    --doctest-modules \
    --no-success-flaky-report \
    --durations=10 \
    -m "not eco" \
    }
passenv =
  CURL_CA_BUNDLE  # https proxies, https://github.com/tox-dev/tox/issues/1437
  FORCE_COLOR
  HOME
  NO_COLOR
  PYTEST_*  # allows developer to define their own preferences
  PYTEST_REQPASS  # needed for CI
  PY_COLORS
  RTD_TOKEN
  REQUESTS_CA_BUNDLE  # https proxies
  SSL_CERT_FILE  # https proxies
  LANG
  LC_ALL
  LC_CTYPE
# recreate = True
setenv =
  # Avoid runtime warning that might affect our devel testing
  devel: ANSIBLE_DEVEL_WARNING = false
  COVERAGE_FILE = {env:COVERAGE_FILE:{toxworkdir}/.coverage.{envname}}
  COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
  PIP_CONSTRAINT = {toxinidir}/requirements.txt
  devel: PIP_CONSTRAINT = /dev/null
  PIP_DISABLE_PIP_VERSION_CHECK = 1
  PRE_COMMIT_COLOR = always
  FORCE_COLOR = 1
allowlist_externals =
  git
  sh
  tox
  rm
# both options needed to workaround https://github.com/tox-dev/tox/issues/2197
usedevelop = false
skip_install = true

[testenv:lint]
description = Run all linters
# pip compile includes python version in output constraints, so we want to
# be sure that version does not change randomly.
basepython = python3.9
deps =
  pre-commit>=2.6.0
  pip-tools>=6.8.0
  setuptools>=51.1.1
skip_install = true
commands =
  {envpython} -m pre_commit run --all-files --show-diff-on-failure {posargs:}
  # manual hook as they are unlikely to work outside tox
  {envpython} -m pre_commit run --all-files --show-diff-on-failure --hook-stage manual pip-compile

passenv =
  {[testenv]passenv}
  PRE_COMMIT_HOME
setenv =
  {[testenv]setenv}
  # avoid messing pre-commit with out own constraints
  PIP_CONSTRAINT=

[testenv:validate-hook]
description = Validate pre-commit hook definition
deps = pre-commit
changedir = {toxworkdir}/x
commands =
  git init --initial-branch=main
  python3 -m pre_commit try-repo -v {toxinidir} ansible-lint
setenv =
  PIP_CONSTRAINT = /dev/null

[testenv:deps]
description = Bump all test dependencies
# we reuse the lint environment
envdir = {toxworkdir}/lint
skip_install = true
basepython = python3.9
deps =
  {[testenv:lint]deps}
setenv =
  # without his upgrade would likely not do anything
  PIP_CONSTRAINT = /dev/null
commands =
  # manual hook calls the optional pip-compile-upgrade hook
  pre-commit run --all-files --show-diff-on-failure --hook-stage manual pip-compile-upgrade
  # Update pre-commit hooks
  pre-commit autoupdate
  # We fail if files are modified at the end
  git diff --exit-code

[testenv:docs]
description = Builds docs
basepython = python3
deps =
  --editable .[docs,test]
setenv =
  PIP_CONSTRAINT = {toxinidir}/requirements.txt
commands =
  # regenerate docs for rules
  sh -c "cd {toxinidir} && ansible-lint -L -f docs"
  sh -c "rm -f {toxinidir}/docs/pkg/*.rst"
  {envpython} -m sphinx \
    -j auto \
    -b linkcheck \
    -a \
    -n \
    -W --keep-going \
    {tty:--color} \
    -d "{envdir}/.doctrees" \
    . \
    "{envdir}/html"

  # Build the html docs with Sphinx:
  {envpython} -m sphinx \
    -j auto \
    -b html \
    --color \
    -a \
    -n \
    -W --keep-going \
    -d "{envdir}/.doctrees" \
    . \
    "{envdir}/html"

  # Print out the output docs dir and a way to serve html:
  - {envpython} -c \
  'import pathlib, webbrowser; docs_dir = pathlib.Path(r"{envdir}") / "html"; index_file = docs_dir / "index.html"; '\
  'print(f"\nTo serve docs, use `python3 -m http.server --directory \{docs_dir\} 0`\n"); webbrowser.open(f"file://\{index_file\}")'

changedir = {toxinidir}/docs

[testenv:redirects]
description = Update documentation redirections for readthedocs
deps =
  readthedocs-cli
commands =
  # This assumes you loaded RTD_TOKEN in your environment
  rtd projects ansible-lint redirects sync -f docs/redirects.yml --wet-run

[testenv:eco]
description = Perform ecosystem impact (downstream testing) https://github.com/ansible/ansible-lint/discussions/1403
skip_install = true
deps =
  {[testenv]deps}
commands =
  # installs ansible-lint@main in separated venv, to be used as reference
  tox --notest -qq -e eco-main
  pytest -n auto --durations=3 -m eco

[testenv:eco-main]
# that is used by eco to install @main version and produce reference eco
# results, ones that we will compare with current change.
skip_install = true
deps =
  ansible-lint @ git+https://github.com/ansible/ansible-lint@main
commands =
  ansible-lint --version

[testenv:packaging]
basepython = python3
description =
  Build package, verify metadata, install package and assert behavior when ansible is missing.
deps =
  build >= 0.7.0, < 0.8.0
  twine
skip_install = true
# Ref: https://twitter.com/di_codes/status/1044358639081975813
commands =
  # build wheel and sdist using PEP-517
  {envpython} -c 'import os.path, shutil, sys; \
  dist_dir = os.path.join("{toxinidir}", "dist"); \
  os.path.isdir(dist_dir) or sys.exit(0); \
  print("Removing \{!s\} contents...".format(dist_dir), file=sys.stderr); \
  shutil.rmtree(dist_dir)'
  {envpython} -m build \
    --outdir {toxinidir}/dist/ \
    {toxinidir}
  # Validate metadata using twine
  twine check --strict {toxinidir}/dist/*
  # Install the wheel
  sh -c "python3 -m pip install {toxinidir}/dist/*.whl"

[testenv:clean]
skip_install = true
deps =
commands =
  find . -type f -name '*.py[co]' -delete -o -type d -name __pycache__
  rm -rf .mypy_cache

[testenv:coverage]
description = Combines and displays coverage results
commands =
  sh -c "coverage combine .tox/.coverage.*"
  # needed by codecov github actions:
  coverage xml
  # just for humans running it:
  coverage report --skip-covered --fail-under=88
deps =
  coverage[toml]
