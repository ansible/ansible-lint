name: 👷

on:
  create:  # branch or tag created, need to filter on publish
  push:
  pull_request:
  schedule:
  - cron: 1 0 * * *  # Run daily at 0:01 UTC
  # Run every Friday at 18:02 UTC
  # https://crontab.guru/#2_18_*_*_5
  # - cron: 2 18 * * 5

jobs:
  test-matrix:
    name: >-
      Ansible ${{ matrix.ansible-version }}/${{ matrix.python-version }}@${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      # fail-fast: false
      # max-parallel: 5
      matrix:
        python-version:
        - 3.8
        - 3.9-dev
        - 3.7
        - 3.6
        # NOTE: Installing ansible under 3.10-dev is currently not
        # NOTE: possible because compiling cffi explodes.
        os:
        - ubuntu-20.04
        - ubuntu-latest
        - ubuntu-16.04
        - macOS-latest
        # - windows-latest
        # - windows-2016
        ansible-version:
        - devel
        - 29
        - 28
        exclude:
        # There's no nightlies for macOS
        - os: macOS-latest
          python-version: 3.9-dev
        # Ubuntu 16.04 is incompatible with the deadsnakes action
        - os: ubuntu-16.04
          python-version: 3.9-dev

    env:
      TOX_PARALLEL_NO_SPINNER: 1

    steps:
    - uses: actions/checkout@master
    - name: Get history and tags for SCM versioning to work
      run: |
        git fetch --prune --unshallow
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Set up stock Python ${{ matrix.python-version }} from GitHub
      if: >-
        !endsWith(matrix.python-version, '-dev')
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up Python ${{ matrix.python-version }} from deadsnakes
      if: >-
        endsWith(matrix.python-version, '-dev')
      uses: deadsnakes/action@v1.0.0
      with:
        python-version: ${{ matrix.python-version }}
    - name: >-
        Log the currently selected Python
        version info (${{ matrix.python-version }})
      run: |
        python --version --version
        which python
    - name: Pip cache
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ env.PY_SHA256 }}-${{ hashFiles('setup.cfg') }}-${{ hashFiles('tox.ini') }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('.pre-commit-config.yaml') }}-${{ hashFiles('pytest.ini') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install tox
      run: |
        python -m pip install --upgrade tox
    - name: Log installed dists
      run: >-
        python -m pip freeze --all
    - name: >-
        Initialize tox envs: Ansible ${{ matrix.ansible-version }}
      run: |
        python -m tox --parallel auto --parallel-live --notest -vv
      env:
        TOXENV: ansible${{ matrix.ansible-version }}
    - name: Test with tox
      run: |
        python -m tox --parallel auto --parallel-live
      env:
        TOXENV: ansible${{ matrix.ansible-version }}
    - name: Archive logs
      uses: actions/upload-artifact@v1
      with:
        name: logs.zip
        path: .tox/ansible${{ matrix.ansible-version }}/log/

  publish-dists:
    name: Publish 🐍📦 to (Test)PyPI
    needs:
    - test-matrix
    runs-on: ubuntu-latest

    env:
      PY_COLORS: 1
      TOXENV: build-dists,metadata-validation
      TOX_PARALLEL_NO_SPINNER: 1

    steps:
    - name: Switch to using Python 3.8 by default
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install tox
      run: >-
        python -m
        pip install
        --user
        tox
    - name: Check out src from Git
      uses: actions/checkout@v2
    - name: Get history and tags for SCM versioning to work
      run: |
        git fetch --prune --unshallow
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Instruct setuptools-scm not to add a local version part
      if: >-
        github.event_name == 'push' &&
        github.ref == format(
          'refs/heads/{0}', github.event.repository.default_branch
        )
      run: |
        echo 'local_scheme = "no-local-version"' >> pyproject.toml
        git update-index --assume-unchanged pyproject.toml
    - name: Pre-populate tox env
      run: python -m tox -p auto --parallel-live -vvvv --notest
    - name: Build dists
      run: python -m tox -p auto --parallel-live -vvvv
    - name: Publish 🐍📦 to TestPyPI
      if: >-
        github.event_name == 'push' &&
        github.ref == format(
          'refs/heads/{0}', github.event.repository.default_branch
        )
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.testpypi_password }}
        repository_url: https://test.pypi.org/legacy/
    - name: Publish 🐍📦 to PyPI
      if: >-  # "create" workflows run separately from "push" & "pull_request"
        github.event_name == 'create' &&
        github.event.ref_type == 'tag'
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.pypi_password }}
